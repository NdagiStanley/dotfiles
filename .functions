#!/usr/bin/env bash

# Create a new directory and enter it
mkd() {
  mkdir -p "$@"
  cd "$@" || exit
}

nd() {
  if [ -z "$1" ]; then
    echo "Usage: $0 <script_file> [argument]"
    exit
  fi

  script=$1
  arg=$2

  if [ -z "$arg" ]; then
    node "$script.js"
  else
    node "$script.js" "$arg"
  fi
}

function server() {
  python3 -m http.server "$@"
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

function compare() {
  hub compare "${1:=develop}"..."$(git rev-parse --abbrev-ref HEAD)"
}

function compare_branch() {
  hub compare ${1:="$@"}..."$(git rev-parse --abbrev-ref HEAD)"
}

# Call from a local repo to open the repository on github/bitbucket in browser
# Modified version of https://github.com/zeke/ghwd
repo() {
  # Figure out github repo base URL
  local base_url
  base_url=$(git config --get remote.origin.url)
  base_url=${base_url%\.git} # remove .git from end of string

  # Fix git@github.com: URLs
  base_url=${base_url//git@github\.com:/https:\/\/github\.com\/}

  # Fix git://github.com URLS
  base_url=${base_url//git:\/\/github\.com/https:\/\/github\.com\/}

  # Fix git@bitbucket.org: URLs
  base_url=${base_url//git@bitbucket.org:/https:\/\/bitbucket\.org\/}

  # Fix git@gitlab.com: URLs
  base_url=${base_url//git@gitlab\.com:/https:\/\/gitlab\.com\/}

  echo $base_url

  # Validate that this folder is a git folder
  if ! git branch 2>/dev/null 1>&2; then
    echo "Not a git repo!"
    exit $?
  fi

  # Find current directory relative to .git parent
  full_path=$(pwd)
  git_base_path=$(
    cd "./$(git rev-parse --show-cdup)" || exit 1
    pwd
  )
  relative_path=${full_path#$git_base_path} # remove leading git_base_path from working directory

  # If filename argument is present, append it
  if [ "$1" ]; then
    relative_path="$relative_path/$1"
  fi

  echo $relative_path
  # Figure out current git branch
  # git_where=$(command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
  git_where=$(command git name-rev --name-only --no- undefined --always HEAD) 2>/dev/null

  # Remove cruft from branchname
  branch="${git_where#refs\/heads\/}"
  branch="${git_where#remotes\/origin\/}"
  branch="${branch#tags\/}"
  branch="${branch%^0}"

  [[ $base_url == *bitbucket* ]] && tree="src" || tree="tree"
  url="$base_url/$tree/$branch$relative_path"

  echo "Calling $(type open) for $url"

  open "$url" &>/dev/null || (echo "Using $(type open) to open URL failed." && exit 1)
}

todo() {
  ag --color-line-number '1;36' --color-path '1;36' --ignore-case --print-long-lines --silent '(?:<!-- *)?(?:#|//|/\*+|<!--|--) *(TODO|FIXME|FIX|BUG|UGLY|HACK|NOTE|IDEA|REVIEW|DEBUG|OPTIMIZE)(?:\([^(]+\))?:?(?!\w)(?: *-->| *\*/|(?= *(?:[^:]//|/\*+|<!--|@|--))|((?: +[^\n@]*?)(?= *(?:[^:]//|/\*+|<!--|@|--))|(?: +[^@\n]+)?))'
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! "$(uname -s)" = 'Darwin' ]; then
  if grep -q Microsoft /proc/version; then
    # Ubuntu on Windows using the Linux subsystem
    alias open='explorer.exe'
  else
    alias open='xdg-open'
  fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
  if [ $# -eq 0 ]; then
    open .
  else
    open "$@"
  fi
}
